import os
import asyncio

from loguru import logger

from datetime import datetime
from asgiref.sync import sync_to_async
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from django.core.management import BaseCommand
from django.core.wsgi import get_wsgi_application

from main.models import User, Flower, Order  # noqa PyUnresolvedReferences
from posymess.settings import BOT_TOKEN  # noqa PyUnresolvedReferences

from .support import clear_commands
from .keyboards import start_keyboard, main_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "posymess.settings")
application = get_wsgi_application()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add('debug.log', format='{time} {level} {message}', level='DEBUG', rotation='100 MB', compression='zip')


# –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class States(StatesGroup):
    enter_email = State()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_users = {}

# –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
mem_storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(bot=bot, storage=mem_storage)


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(Command('start'))
async def start_command(message: types.Message, state: FSMContext):
    await clear_commands(bot)
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Posy message! –Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –±—É–∫–µ—Ç–æ–≤')
    await state.set_state(States.enter_email)
    await message.reply(text='–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã',
                        reply_markup=start_keyboard)


@dp.message(States.enter_email)
async def enter_email(message: types.Message, state: FSMContext):
    email = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–¥—Ä–µ—Å–∞ —ç–ª. –ø–æ—á—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        user = await sync_to_async(User.objects.get)(email=email)
        active_users[message.from_user.id] = user
        await state.update_data(email=email)
        await state.clear()
        await message.answer(text='–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!', reply_markup=main_keyboard)

    except User.DoesNotExist:
        await message.answer('–¢–∞–∫–∞—è –ø–æ—á—Ç–∞ –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞\n'
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º')


# –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫
@dp.message(F.text == 'üöÄ –ó–∞–ø—É—Å–∫')
async def start_handler(message: types.Message, state: FSMContext):
    await clear_commands(bot)
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Posy message! –Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –±—É–∫–µ—Ç–æ–≤')
    await state.set_state(States.enter_email)
    await message.reply(text='–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã',
                        reply_markup=start_keyboard)


# –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏
@dp.message(F.text == 'ü§ì –ü–æ–º–æ—â—å')
async def help_handler(message: types.Message):
    await message.answer(text='–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏\n'
                              '\n–í—ã –º–æ–∂–µ—Ç–µ:\n'
                              '1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ (–∫–Ω–æ–ø–∫–∞ ¬´üöÄ –ó–∞–ø—É—Å–∫¬ª)\n'
                              '1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ (–∫–Ω–æ–ø–∫–∞ ¬´üíê –ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç¬ª)\n'
                              '2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã (–∫–Ω–æ–ø–∫–∞ ¬´üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã¬ª)\n'
                              '3. –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã (–∫–Ω–æ–ø–∫–∞ ¬´üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã¬ª)')


# –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π
def orders_list(orders) -> list[dict[str, str | float]]:
    new_orders = []

    for one_item in orders:
        temp_dict = {}
        temp_dict = {'id': one_item.id,
                     'posy_name': one_item.flower.posy_name,
                     'order_date': datetime.strftime(one_item.order_date, format='%d.%m.%Y'),
                     'order_price': float(one_item.order_price)}

        new_orders.append(temp_dict)

    return new_orders


# –ö–Ω–æ–ø–∫–∞ –º–æ–∏ –∑–∞–∫–∞–∑—ã
@dp.message(F.text == 'üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã')
async def show_orders(message: types.Message):
    current_user = active_users[message.from_user.id]

    if not current_user:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    orders = await sync_to_async(Order.objects.filter)(user=current_user)

    if await sync_to_async(orders.exists)():

        simple_orders = await sync_to_async(orders_list)(orders)

        for order in simple_orders:
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
            delete_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                              InlineKeyboardButton(text=f'‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'delete:{order['id']}')]],
                              resize_keyboard=True)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
            await message.answer(text=f'–ó–∞–∫–∞–∑ ‚Ññ{order['id']} '
                                      f'–±—É–∫–µ—Ç ¬´{order['posy_name']}¬ª '
                                      f'–¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order['order_date']} '
                                      f'—Ü–µ–Ω–∞ {order['order_price']}, ',
                                      reply_markup=delete_keyboard)
    else:
        await message.answer('–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç')


# –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
# @dp.callback_query(F.data.startswith('delete:'))
# async def remove_order(callback: types.CallbackQuery):
#     dead_id = callback.data.split(':')[1]
#     order = await sync_to_async(Order.objects.get)(order_id=dead_id)
#     await sync_to_async(order.delete)()
#     # order.save()
#     await callback.message.edit_text(text=f'–ó–∞–∫–∞–∑ ‚Ññ{dead_id} –æ—Ç–º–µ–Ω—ë–Ω')
#     await callback.answer(text='')


# –ö–Ω–æ–ø–∫–∞ –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç
# @dp.message(F.text == 'üíê –ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç')
# async def new_order(message: types.Message):
#     active_user = current_user(message)
#
#     if not active_user:
#         return
#
#     # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—É–∫–µ—Ç–æ–≤
#     posies = Flower.objects.all() # noqa PyUnresolvedReferences
#
#     if posies.exists():
#
#         for posy in posies:
#
#             order_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
#                              InlineKeyboardButton(text=posy.posy_name, callback_data=f'pick_one:{posy.id}')]],
#                              resize_keyboard=True)
#
#         await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=order_keyboard)
#
#
# @dp.callback_query(Text(startswith="select_bouquet:"))
# async def select_bouquet(callback: types.CallbackQuery, state: FSMContext):
#     bouquet_id = int(callback.data.split(":")[1])
#     data = await state.get_data()
#     email = data.get("email")
#
#     if email:
#         user = User.objects.get(email=email)
#         bouquet = Bouquet.objects.get(id=bouquet_id)
#
#         # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
#         Order.objects.create(user=user, bouquet=bouquet, status="active")
#         await callback.message.edit_text(f"–ó–∞–∫–∞–∑ –Ω–∞ {bouquet.name} —Å–æ–∑–¥–∞–Ω üå∏")
#         await callback.answer("–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω.")
#     else:
#         await callback.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email.")
#         await callback.answer("Email –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# posy = get_object_or_404(Flower, posy_name=posy_name)
# price = posy.price
# active = request.user
#
# print(type(posy), posy)
# print(type(posy), price)
# print(type(active), active)

# order = Order.objects.create(user=active, flower=posy, order_price = price) # noqa PyUnresolvedReferences
# return redirect('orders')


class Command(BaseCommand):
    """
    –ö–ª–∞—Å—Å —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞

    """

    @classmethod
    async def run_bot(cls) -> None:
        await clear_commands(bot)
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

    @classmethod
    async def escape_bot(cls) -> None:
        await bot.session.close()

    def handle(self, *args, **kwargs) -> None:
        try:
            logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
            asyncio.run(self.run_bot())

        except KeyboardInterrupt:
            logger.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

        finally:
            asyncio.run(self.escape_bot())