import os
import asyncio
from loguru import logger

from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from django.core.management import BaseCommand
from django.core.wsgi import get_wsgi_application


from .support import clear_commands
from .keyboards import start_keyboard
from main.views import get_user # noqa PyUnresolvedReferences
from main.models import User, Flower, Order  # noqa PyUnresolvedReferences
from posymess.settings import BOT_TOKEN  # noqa PyUnresolvedReferences

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "posymess.settings")
application = get_wsgi_application()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add('debug.log', format='{time} {level} {message}', level='DEBUG', rotation='100 MB', compression='zip')

# –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
mem_storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(bot=bot, storage=mem_storage)


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–∑–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(Command('start'))
async def start_command(message: types.Message):
    await clear_commands(bot)
    await message.answer(text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Posy message!\n–Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –±—É–∫–µ—Ç–æ–≤', reply_markup=start_keyboard)


# –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â—å
@dp.message(F.text == 'ü§ì –ü–æ–º–æ—â—å')
async def help_handler(message: types.Message):
    await message.answer('–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏\n'
                         '\n–í—ã –º–æ–∂–µ—Ç–µ:\n'
                         '1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ (–∫–Ω–æ–ø–∫–∞ ¬´üíê –ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç¬ª)\n'
                         '2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã (–∫–Ω–æ–ø–∫–∞ ¬´üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã¬ª)\n'
                         '3. –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã (–∫–Ω–æ–ø–∫–∞ ¬´üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã¬ª)')


# –ö–Ω–æ–ø–∫–∞ –º–æ–∏ –∑–∞–∫–∞–∑—ã
@dp.message(F.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_orders(message: types.Message):
    current_user = get_user()

    if not current_user:
        error_message = '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ'
        return await message.answer(error_message)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –∑–∞–∫–∞–∑—ã
    orders = Order.objects.filter(user=current_user)

    if orders.exists():
        for order in orders:
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ {order.id}", callback_data=f"cancel_order:{order.id}"))
            await message.answer(f"–ó–∞–∫–∞–∑ #{order.id}: {order.bouquet.name} üåπ\n"
                                 f"–°—Ç–∞—Ç—É—Å: {order.status}", reply_markup=markup)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")–∞–Ω–Ω—ã–π email –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



















class Command(BaseCommand):
    """
    –ö–ª–∞—Å—Å —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞

    """

    @classmethod
    async def run_bot(cls) -> None:
        await clear_commands(bot)
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

    @classmethod
    async def escape_bot(cls) -> None:
        await bot.session.close()

    def handle(self, *args, **kwargs) -> None:
        try:
            logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
            asyncio.run(self.run_bot())

        except KeyboardInterrupt:
            logger.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

        finally:
            asyncio.run(self.escape_bot())